services:
  nginx:
    image: nginx:latest
    ports:
      - "8080:80"
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      # - frontend
      - backend

  frontend:
    build: ./frontend/paper-app
    env_file: ./frontend/paper-app/.env
    command: sh -c "npm run build"
    volumes:
      - frontend_dist:/app/dist
    environment:
      - CHOKIDAR_USEPOLLING=true
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
    # depends_on:
    #   - backend    
   
  backend:
    image: mayowasam/backend:v1
    env_file: ./backend/.env
    # command: npm run dev
    command: sh -c "until pg_isready -h postgres -p 5432 -U $POSTGRES_USER; do sleep 2; done && npx prisma migrate deploy && npx prisma generate && npm start"
    depends_on:
      - postgres
    # for docker swarm
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
  postgres:
    image: postgres:latest
    # container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      # POSTGRES_PASSWORD: /run/secrets/my_secret
      POSTGRES_PASSWORD_FILE: /run/secrets/my_secret  
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_INITDB_ARGS: "--data-checksums"
      PGOPTIONS: "-c shared_buffers=64MB -c work_mem=2MB -c max_connections=50"

    # ports:
    #   - "${POSTGRES_PORT}:5432"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
    volumes:
      - pgdata:/var/lib/postgresql
    secrets:
      - my_secret
  
  redis:
    image: redis:latest
    # container_name: redis
    ports:
      - "6379:6379"

secrets:
  my_secret:
    file: ./secrets/secrets.txt

volumes:
  pgdata:
  frontend_dist:
